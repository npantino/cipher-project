package com.company;

import java.util.Scanner;
public class Main {

    public static void main(String[] args) {
        /*
        Caesar Cipher
        (a = 0, b = 1, ... y = 24, z = 25)
        encrypt: hello world, shift = 1
        message => h e l  l  o      w  o  r  l  d
                   7 4 12 12 14 -11 22 14 17 12 3
        +          1 1  1  1 1      1  1  1  1  1
        =>         8 5 13 13 15 -65 23 15 18 13 4
        =>         i f  m  m  p     x  p  s  m  e
        => ifmmp xpsme

        Polyalphabetic Cipher
        (a = 0, b = 1, ... y = 24, z = 25)
        encrypt: the quick brown fox, keyword = snake
        keyword => 18 13 0 10 4
        message =>  t h e      q u i c k       b  r  o  w  n     f  o  x
                   19 7 4 -11 16 20 8 2 10 -11 1 17 14 22 13 -11 5 14 23
        +          18 13 0    10 4 18 13 0     10 4 18 13 0      10 4 18
                   mod 26 for each number (32 % 26 = 6)
        =          11 20 4 -65 0 24 0 15 10 -65 11 21 6 9 13 -65 15 18 15
        =>         l  u  e    a  y  a  p  k     l  v  g  j  n     p  s  p
        => lue ayapk lvgjn psp

        One-time pad
        (a = 0, b = 1, ... y = 24, z = 25)
        encrypt: the quick brown fox
        pad is generated by choosing a random integer between 0 and 25 for each shift
        pad: izmlnftpulvgvqpp (converted to integers)
        message =>  t h e      q u i c k       b  r  o  w  n     f  o  x
                   19 7 4 -11 16 20 8 2 10 -11 1 17 14 22 13 -11 5 14 23
        + pad      8 25 12    11 13 5 19 15    20 11 21 6 21    16 15 15
                   mod 26 for each number (32 % 26 = 6)
        =          1  6 16 -65 1  7 13 21 25 -65 21 2  9  2  8 -65 21 3 12
        =>         b  g  q     b  h n  v   z      v c  j  c  i     v  d m
        => bgq bhnvz vcjci vdm
        */

        Scanner scanner = new Scanner(System.in);

        CaesarCipher caesarCipher = new CaesarCipher();
        PolyalphabeticCipher polyalphabeticCipher = new PolyalphabeticCipher();
        OneTimePad oneTimePad = new OneTimePad();

        String originalMsg = "";
        int shiftKey = 0;
        String shiftWord = "";
        String method = "";
        String choice = "";
        String padString = "";
        String errMsg = "Error, please try again";
        boolean encryptionMethod = true;
        boolean correctChoice = true;
        boolean correctShift = true;

        // Some user input, and control flow with an error message

        // Asks for encryption method (caesar, polyalphabetic, one-time pad)
        while (encryptionMethod) {
            System.out.println("Caesar Cipher, Polyalphabetic Cipher, or One-time Pad? ");
            method = scanner.nextLine().toLowerCase();
            switch (method) {
                case "caesar", "polyalphabetic", "one-time pad",
                        "caesar cipher", "polyalphabetic cipher" -> encryptionMethod = false;
                default -> System.out.println(errMsg);
            }
        }

        // Asks if user wants to encrypt or decrypt their message
        while (correctChoice) {
            System.out.println("Encrypt or Decrypt? ");
            choice = scanner.nextLine().toLowerCase();
            if (choice.equals("encrypt")) {
                System.out.println("Enter message to be encrypted: ");
                originalMsg = scanner.nextLine();
                correctChoice = false;
            }
            else if (choice.equals("decrypt")) {
                System.out.println("Enter message to be decrypted: ");
                originalMsg = scanner.nextLine();
                correctChoice = false;
            }
            else {
                System.out.println(errMsg);
            }
        }

        while (correctShift) {
            // Asks for different shifts based on the encryption method
            switch (method) {
                case "caesar" -> {
                    // Shift key refers to amount of times a letter will be shifted relative to the alphabet.
                    System.out.println("Enter shift key (0 - 25): ");
                    shiftKey = scanner.nextInt();
                    correctShift = false;
                }
                case "polyalphabetic" -> {
                    // Characters in the keyword will be converted into integers, to be used as shifts.
                    System.out.println("Enter shift keyword: ");
                    shiftWord = scanner.nextLine();
                    polyalphabeticCipher.convertShift(shiftWord);
                    correctShift = false;
                }
                case "one-time pad" -> {
                    // If encrypting with one-time pad,
                    // program will generated a pad with the same amount of characters as the original message.
                    // Also converts the pad from integer format to string,
                    // so the user can use that string to decrypt the message in the future.
                    if (choice.equals("encrypt")) {
                        oneTimePad.generatePad(originalMsg);
                        // Prints out pad (string) after converting the format
                        oneTimePad.convertPadInt(originalMsg);
                    }
                    // If decrypting, user enters in pad (string), program converts it from string to integers.
                    else {
                        System.out.println("Enter pad (string): ");
                        padString = scanner.nextLine();
                        oneTimePad.convertPadString(padString);
                    }
                    correctShift = false;
                }
                default -> System.out.println(errMsg);
            }
        }

        // Decrypt means shifting letters in reverse (I => H), so each shift is multiplied by -1.
        if (choice.equals("decrypt")) {
            if (method.equals("caesar")) {
                shiftKey *= -1;
            }
            else if (method.equals("polyalphabetic")) {
                polyalphabeticCipher.reverseShift(shiftWord);
            }
            else {
                oneTimePad.reversePad(padString);
            }
        }

        // Encrypts/Decrypts message, converts it back to a string, and prints the result
        if (method.equals("caesar")) {
            caesarCipher.convertMsg(originalMsg);
            caesarCipher.shift(shiftKey, originalMsg);
            caesarCipher.convertList(originalMsg);
        }
        else if (method.equals("polyalphabetic")) {
            polyalphabeticCipher.convertMsg(originalMsg);
            polyalphabeticCipher.shift(shiftWord, originalMsg);
            polyalphabeticCipher.convertList(originalMsg);
        }
        else {
            oneTimePad.convertMsg(originalMsg);
            oneTimePad.shift(originalMsg);
            oneTimePad.convertList(originalMsg);
        }
    }
}